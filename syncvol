#!/usr/bin/env bash

## Volumes to sync
ORIG_VOLUME='TnaBook'
DEST_VOLUMES[0]='fr√∏'
DEST_VOLUMES[1]='TnaPedia'

## Assets to sync (per Destination Volume)
FILES_0=()
FOLDERS_0=(
'music'
'photo_bank'
'flickr_backup'
'flickr_backup_desktop'
'podcasts'
'Wintermute_backup'
)

FILES_1=(
'README.md'
)
FOLDERS_1=(
'_harddrive_tools'
'alignment'
'comics'
'music'
'photo_bank'
'flickr_backup'
'flickr_backup_desktop'
'podcasts'
'Wintermute_backup'
'Movies'
)

FILES_ALL=(FILES_0 FILES_1)
FOLDERS_ALL=(FOLDERS_0 FOLDERS_1)


## Common code
# flags
REVERSE=0
NOOP=0
SHOW_STATS=0
FRESHEN=0

usage () {
  printf "Usage: $(basename $0) [-n] [-r] [-s] [-f] <Volume ID>
          -n : no operation (just check)
          -r : reverse (current volume becomes the destination)
          -s : show stats after every transfer
          -f : freshen up files (do NOT use -u in rsync)
"
}

while getopts ":rnsf" arg; do
  case $arg in
  r)
    REVERSE=1
  ;;
  n)
    NOOP=1
  ;;
  s)
    SHOW_STATS=1
  ;;
  f)
    FRESHEN=1
  ;;
  *) 
    usage
    exit 127
  ;;
  esac
done
shift $(($OPTIND -1))

# Select destination volume
SELECTED_DEST_VOLUME=$([ $# -ge 1 ] && printf $1 || printf 0)
DEST_VOLUME=${DEST_VOLUMES[$SELECTED_DEST_VOLUME]}

# Check destination volume
if [ -z "${DEST_VOLUME}" ]; then
  echo "PLEASE USE ONE OF THE FOLLOWING IDs (or NO ID for [0])"
  for i in $(seq 0 1 $((${#DEST_VOLUMES[@]} -1)) ); do
   echo "- ${i} for ${DEST_VOLUMES[i]}"
  done
  exit 1
fi
if [ ! -d "/Volumes/${DEST_VOLUME}" ]; then
  echo "VOLUME '${DEST_VOLUME}' is not mounted. PLEASE DO SO."
  exit 2
fi


## Start process
echo "USING volume '${DEST_VOLUME}'"

# Select specific set of assets
declare -n FILES="${FILES_ALL[${SELECTED_DEST_VOLUME}]}"
declare -n FOLDERS="${FOLDERS_ALL[${SELECTED_DEST_VOLUME}]}"

ACTION_MSG=$([ $NOOP -eq 1 ] && printf "CHECKING" || printf "UPDATING")
ACTION_RSYNC_PARAM=$([ $NOOP -eq 1 ] && printf '%s' "-aiOn --info=progress2" || printf '%s' "-aiO --info=progress2")
ACTION_RSYNC_PARAM_STATS=$([ $SHOW_STATS -eq 1 ] && printf '%s' "--stats" || printf '%s' "")
ACTION_RSYNC_PARAM_FRESHEN=$([ $FRESHEN -eq 1 ] && printf '%s' "" || printf '%s' "-u")

MAIN_VOLUME=${ORIG_VOLUME}
if [ $REVERSE -eq 1 ]; then
  if [ $NOOP -ne 1 ]; then
    printf "REVERSE mode cannot be used except for no-op\n"
    exit 1
  fi
  ORIG_VOLUME=${DEST_VOLUME}
  DEST_VOLUME=${MAIN_VOLUME}
fi


printf "${ACTION_MSG} backup from '${ORIG_VOLUME}' to '${DEST_VOLUME}'\n"
for i in $(seq 0 1 $((${#FILES[@]} -1)) 2>/dev/null); do
  printf "> ${FILES[i]}\n"
  rsync ${ACTION_RSYNC_PARAM} ${ACTION_RSYNC_PARAM_FRESHEN} ${ACTION_RSYNC_PARAM_STATS} "/Volumes/${ORIG_VOLUME}/${FILES[i]}" "/Volumes/${DEST_VOLUME}" --delete --exclude-from="/Volumes/${MAIN_VOLUME}/rsync_exclude"
done

for i in $(seq 0 1 $((${#FOLDERS[@]} -1)) 2>/dev/null); do
  printf "> ${FOLDERS[i]}\n"
  rsync ${ACTION_RSYNC_PARAM} ${ACTION_RSYNC_PARAM_FRESHEN} ${ACTION_RSYNC_PARAM_STATS} "/Volumes/${ORIG_VOLUME}/${FOLDERS[i]}/" "/Volumes/${DEST_VOLUME}/${FOLDERS[i]}/" --delete --exclude-from="/Volumes/${MAIN_VOLUME}/rsync_exclude"
done
